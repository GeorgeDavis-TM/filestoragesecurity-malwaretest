import json
import zipfile
import tarfile
import gzip
import rarfile
import os
import urllib3
import urllib.request
import urllib.parse
from bs4 import BeautifulSoup
import random
import filetype

import boto3

def emptyDir(dirPath):

    print(str(os.listdir(dirPath)))

    # Empty /tmp folder for first time use
    for fileName in os.listdir(dirPath):

        os.remove(dirPath + fileName)

def getfile(http):

    files_url = "http://www.tekdefense.com/downloads/malware-samples/"
    download_base_url = "http://www.tekdefense.com"

    r = http.request('GET', files_url)

    parsed_html = BeautifulSoup(r.data, 'html.parser')

    tempList = parsed_html.body.find_all('h3', attrs={'class': 'title'})

    linksDict = {}

    for link in tempList:

        linksDict.update({link.text: download_base_url + urllib.parse.quote(link.find('a').get("href"))})
    
    return random.choice(list(linksDict.items()))

def zipRepack(zipPassword, dirPath, fileName, filePath):

    print(str(filetype.guess(filePath)))

    print(str(os.listdir('/tmp/')))
    
    with zipfile.ZipFile(filePath) as zipFile:

        zipFile.extractall(pwd=bytes(zipPassword, 'utf-8'), path=dirPath)       

    # Delete password protected zipfile
    os.remove(filePath)

    fileNames = os.listdir(dirPath)

    print("Directory - " + str(fileNames))
    
    if fileName in fileNames:
        
        fileNames.remove(fileName)        
    
    # Write a new zipfile without password
    zipObj = zipfile.ZipFile(filePath, 'w')

    for fileName in fileNames:
        
        zipObj.write(filePath)   

    zipObj.close()

def tarRepack(dirPath, fileName):
        
    tar = tarfile.open(dirPath + fileName)
    names = tar.getnames()
    temp_file_path = ''
    if os.path.isdir(dirPath + fileName + "_files"):
        print('file already exist')
        temp_file_path = os.path.isdir(dirPath + fileName + "_files")
    else:
        temp_file_path = os.mkdir(dirPath + fileName + "_files")
        print('Create a new filename')
    # Because there are many files after decompression, a directory with the same name should be established in advance
    for name in names:
        tar.extract(name, dirPath + fileName + "_files/")
    tar.close()
    return temp_file_path
    
def gzipRepack(fileName):

    f_name = fileName.replace(".gz", "")

    # Get the name of the file, remove
    g_file = gzip.GzipFile(fileName)

    # Create gzip object
    f = open(f_name, "w+").write(g_file.read())

    # After the gzip object is opened with read(), it is written into the file created by open().
    g_file.close()

def rarRepack(dirPath, fileName):
     
    rar = rarfile.RarFile(dirPath + fileName)
    if os.path.isdir(dirPath + fileName + "_files"):
        pass
    else:
        os.mkdir(dirPath + fileName + "_files")
    if os.chdir(dirPath + fileName + "_files"):
        rar.extractall()
        rar.close()

def repackWithoutPassword(fileExtension, zipPassword, dirPath, fileName, filePath):
    
    if "zip" in fileExtension:

        zipRepack(zipPassword, dirPath, fileName, filePath)

    elif "tar" in fileExtension:

        pass
        # tarRepack(dirPath, filePath)

    elif "gz" in fileExtension:

        pass
        # gzipRepack(fileName)

    elif "rar" in fileExtension:

        pass
        # rarRepack(dirPath, fileName)

    else:

        raise Exception("Unrecognized file extension: The file is not a zip, tar, tar.gz, rar.")

def s3WriteToFile(regionName, s3BucketName, filePath, fileName):

    # s3Client = boto3.client('s3', region_name=regionName)

    # s3PutObjectResponse = s3Client.put_object(
    #     Body=data,
    #     Bucket=s3BucketName,
    #     ContentLength=len(data),
    #     Key=filename,        
    #     ServerSideEncryption='AES256',
    #     StorageClass='STANDARD',
    # )

    # print(str(s3PutObjectResponse))

    s3 = boto3.resource('s3', region_name=regionName)

    s3PutObjectResponse = s3.meta.client.upload_file(filePath, s3BucketName, fileName)

    print("\ns3PutObjectResponse - " + str(s3PutObjectResponse))

    # waiter = s3Client.get_waiter('object_exists')

    # s3ObjectExistsResponse = waiter.wait(        
    #     Bucket=s3BucketName,        
    #     Key=filename
    # )

    # print(str(s3ObjectExistsResponse))

    return s3PutObjectResponse

def antimalwaretest(regionName, s3IngestBucketName):
   
    http = urllib3.PoolManager()

    file = getfile(http)
    zipPassword = 'infected'

    # Attempt to download the various eicar test files
    print("---Running Anti-Malware Test---")
    print("Downloading Malware")

    fileName = file[0]
    fileUrl = file[1]

    print(fileName, fileUrl)

    # Building a new filePath
    dirPath = "/tmp/"
    filePath = dirPath + fileName

    # wget.download (fileUrl)
    r = http.request('GET', fileUrl)

    # Empty /tmp folder for first time use
    emptyDir(dirPath)

    # Download file to custom filePath
    urllib.request.urlretrieve(fileUrl, filePath)    

    fileExtension = fileName.split(".")[-1].lower()

    repackWithoutPassword(fileExtension, zipPassword, dirPath, fileName, filePath)

    print(str(os.listdir('/tmp/')))

    print(str(s3WriteToFile(regionName, s3IngestBucketName, filePath, fileName)))    

    # TODO: Build a cleanup function
    print("Remove all Malware Files")
    
    emptyDir(dirPath)

    print(str(os.listdir('/tmp/')))

def main(event, context):

    regionName = str(os.environ.get("awsRegion"))
    s3IngestBucketName = str(os.environ.get("s3IngestBucketName"))

    print(str(os.listdir('/tmp/')))

    antimalwaretest(regionName, s3IngestBucketName)

    body = {
        "message": "Go Serverless v2.0! Your function executed successfully!",
        "input": event 
    }

    return {"statusCode": 200, "body": json.dumps(body)}