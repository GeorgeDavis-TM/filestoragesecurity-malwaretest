org: georgedavis
app: filestoragesecurity-malwaretest
service: filestoragesecurity-malwaretest

frameworkVersion: '3'

custom:
  defaultStage: dev
  stages:
    dev:
      awscli_profile: default
      aws_region: us-east-2
      buckets: filestoragesecurity-ingestbucket,filestoragesecurity-ingestbucket-2,filestoragesecurity-ingestbucket-3-ca
      time_interval_in_hours: 3
    prod:
      awscli-profile: serverless
      aws_region: us-east-1
      buckets: serverless-cloudone
      time_interval_in_hours: 3

provider:
  name: aws
  runtime: python3.8
  profile: ${self:custom.stages.${opt:stage}.awscli_profile}
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${self:custom.stages.${opt:stage}.aws_region}
  memorySize: 512
  timeout: 300
  logRetentionInDays: 14
  environment:
    awsRegion: ${self:custom.stages.${opt:stage}.aws_region}
    s3IngestBucketName: ${self:custom.stages.${opt:stage}.buckets}    
  tags:
    BusinessCase: FSS-MalwareTest
    Owner: TrendMicro
    CodeSource: https://github.com/GeorgeDavis-TM/filestoragesecurity-malwaretest.git
  stackTags:
    BusinessCase: FSS-MalwareTest
    Owner: TrendMicro
    CodeSource: https://github.com/GeorgeDavis-TM/filestoragesecurity-malwaretest.git
  iam:
    role:
      name: filestoragesecurity-malwaretest-${opt:stage, self:custom.defaultStage}
      path: /
      statements:
        - Effect: 'Allow'
          Resource: '*'
          Action: 
            - 's3:*'
            - 'kms:*'
            - 'logs:*'
      tags:
        BusinessCase: FSS-MalwareTest
        Owner: TrendMicro
        CodeSource: https://github.com/GeorgeDavis-TM/filestoragesecurity-malwaretest.git
  lambdaHashingVersion: 20201221

functions:
  main:
    handler: handler.main
    description: Scheduled run of File Storage Security Malware Test Tasks    
    events:
      - schedule:
          name: scheduled-filestoragesecurity-malwaretest-${opt:stage, self:custom.defaultStage}
          description: 'Cloud One File Storage Security Hourly Malware Test Schedule'
          rate: cron(0 0/${self:custom.stages.${opt:stage}.time_interval_in_hours} * * ? *)

plugins:
  - serverless-python-requirements
  
package:
  individually: true
  excludeDevDependencies: false
  include:
    - "!node_modules/**"